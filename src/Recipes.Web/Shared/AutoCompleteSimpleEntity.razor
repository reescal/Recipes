@using Recipes.Web.Models;

<AutoComplete TOption="string" OnInput="OnInput">
    <OverlayTemplate>
        @foreach (var group in filteredEntities)
        {
            <AutoCompleteOptGroup Label="@group.Key">
                <ChildContent>
                    @foreach (var option in group)
                    {
                        <AutoCompleteOption Value="@option" Label="@option.Name" />
                    }
                </ChildContent>
            </AutoCompleteOptGroup>
        }
    </OverlayTemplate>
</AutoComplete>

@code {
    [Parameter]
    public IEnumerable<SimpleEntity> Entities { get; set; } = new List<SimpleEntity>();
    [Parameter]
    public string SearchTerm { get; set; }
    [Parameter]
    public EventCallback<string> SearchTermChanged { get; set; }

    private IEnumerable<IGrouping<string, SimpleEntity>> filteredEntities =>
        string.IsNullOrWhiteSpace(SearchTerm) ?
        Entities.GroupBy(x => x.Type) :
        Entities
            .Where(x => (x.Type + x.Name).Contains(SearchTerm, StringComparison.InvariantCultureIgnoreCase))
            .GroupBy(x => x.Type);

    private async Task OnInput(ChangeEventArgs e) => await SearchTermChanged.InvokeAsync(e.Value.ToString());
}
