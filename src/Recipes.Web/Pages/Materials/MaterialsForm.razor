@using Recipes.Web.Services
@inject IMaterialsService _materialsService

@if(formState == FormState.None)
{
    <Form Model="@material" @ref="@_form" Layout="@FormLayout.Vertical">
        <Validator>
            <FluentValidationValidator />
        </Validator>
        <ChildContent>
            <FormItem Label="Image">
                <Input @bind-Value="context.Image" />
            </FormItem>
            @foreach(var g in context.Properties)
            {
                <Divider Orientation="left" Style="font-weight:bold">@g.LangId</Divider>
                <FormItem Label="Name">
                    <Input @bind-Value="@g.Name" />
                </FormItem>
                <FormItem Label="Description">
                    <TextArea @bind-Value="@g.Description" />
                </FormItem>
                <FormItem Label="Type">
                    <AutoComplete @bind-Value="@g.Type" Options="@MaterialTypes(g.LangId)" />
                </FormItem>
            }
        </ChildContent>
    </Form>
}
else
{
    <Result Status="@formState.ToString().ToLower()" Title="@formState.ToString()" SubTitle="@response">
        <Extra>
            @if(formState == FormState.Error)
            {
                <Button Type="primary" OnClick="() => formState = FormState.None">Try Again</Button>
            }
        </Extra>
    </Result>
}

@code {
    [CascadingParameter]
    protected Lang? Lang { get; set; }
    [CascadingParameter]
    protected Guid? Id { get; set; }

    [Parameter]
    public ModalAction State { get; set; }
    [Parameter]
    public MaterialCreate SelectedMaterial { get; set; }

    private HashSet<EntityTypes> materialTypes { get; set; }
    private HashSet<string> MaterialTypes(Lang lang) => materialTypes?.Single(x => x.LangId == lang)?.Types ?? Enumerable.Empty<string>().ToHashSet();

    private MaterialCreate material => State == ModalAction.Update ? SelectedMaterial : i;

    private MaterialCreate i = new MaterialCreate()
        {
            Properties = new IndexHashSet<MaterialProperties>()
        {
            new MaterialProperties() { LangId = Recipes.Shared.Enums.Lang.English },
            new MaterialProperties() { LangId = Recipes.Shared.Enums.Lang.Spanish }
        }
        };

    private Form<MaterialCreate> _form;
    private FormState formState = FormState.None;
    private string response = string.Empty;

    protected override async Task OnInitializedAsync() => materialTypes = await _materialsService.GetTypes();

    protected override async Task OnAfterRenderAsync(bool firstRender) => materialTypes = await _materialsService.GetTypes();

    public async Task<bool> Submit()
    {
        if(!_form.Validate())
            return false;

        if(State == ModalAction.Create)
            response = await _materialsService.Add(material);
        else if(State == ModalAction.Update)
            response = await _materialsService.Update((Guid)Id, material);

        formState = Guid.TryParse(response, out Guid id) ? FormState.Success : FormState.Error;

        return formState == FormState.Success;
    }
}